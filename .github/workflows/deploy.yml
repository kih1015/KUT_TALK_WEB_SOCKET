name: Build&DeployKUTWebSocketServer

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # ───── 원격·DB 정보 : GitHubSecrets로 관리 ─────
      DEPLOY_HOST:  ${{ secrets.DEPLOY_HOST }}
      DEPLOY_PORT:  ${{ secrets.DEPLOY_PORT }}
      DB_USER:      ${{ secrets.DB_USER }}
      DB_PASS:      ${{ secrets.DB_PASS }}
      APP_PORT:     8090                  # 실행 포트

    steps:
      # 1) 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) 빌드 의존성 설치 (OpenSSL 포함)
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake pkg-config \
            libcjson-dev libmysqlclient-dev libsodium-dev \
            libssl-dev zlib1g-dev   # OpenSSL::Crypto 용

      # 3) CMake 구성 & 빌드
      - name: Configure
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release --target KUT_WEB_SOCKET

      # 4) 실행파일 고정 위치 복사
      - name: Collect binary
        run: |
          cp build/KUT_WEB_SOCKET ./KUT_WEB_SOCKET
          ls -l ./KUT_WEB_SOCKET   # 디버깅용 출력

      # 5) SCP 전송
      - name: Upload via SCP
        uses: appleboy/scp-action@master
        with:
          host:       ${{ env.DEPLOY_HOST }}
          username:   ubuntu
          key:        ${{ secrets.DEPLOY_KEY_PEM }}
          port:       ${{ env.DEPLOY_PORT }}
          source:     "KUT_WEB_SOCKET"               # 단일 파일
          target:     "/home/ubuntu/kut_ws/build/"
          strip_components: 0

      # 6) 원격 재시작
      - name: Restart WebSocket server
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ env.DEPLOY_HOST }}
          username: ubuntu
          key:      ${{ secrets.DEPLOY_KEY_PEM }}
          port:     ${{ env.DEPLOY_PORT }}
          script: |
            APP_DIR=/home/ubuntu/kut_ws
            PIDFILE=$APP_DIR/server.pid
            BIN=$APP_DIR/build/KUT_WEB_SOCKET
            
            echo "==> Stopping previous instance (if any)"
            if [ -f "$PIDFILE" ]; then
              OLD=$(cat "$PIDFILE")
              if kill -0 "$OLD" 2>/dev/null; then
                kill "$OLD"
                echo "Stopped PID $OLD"
                sleep 5
              fi
              rm -f "$PIDFILE"
            fi
            
            echo "==> Starting new instance on port ${{ env.APP_PORT }}"
            cd $APP_DIR/build
            export DB_USER="${{ env.DB_USER }}"
            export DB_PASS="${{ env.DB_PASS }}"
            nohup "$BIN" --port ${{ env.APP_PORT }} \
                  > ../ws.log 2>&1 </dev/null &
            
            echo $! > "$PIDFILE"
            echo "New PID $(cat $PIDFILE) saved."
            sleep 10
